#!/usr/bin/env python3
# bot_local_oneclick.py
import os
import sys
import json
import shlex
import subprocess
from pathlib import Path
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

# --------------- CONFIG ---------------
BOT_TOKEN = os.getenv("8286146152:AAGz1iARSOYSaT7hxHy6TlaydG97xB26xoo") or "PUT_YOUR_BOT_TOKEN_HERE"
APP_NAME = "oneclick_local_bot"
BASE = Path.cwd()
SESSIONS = BASE / "sessions"
SESSIONS.mkdir(exist_ok=True)
DELETE_AFTER_SEND = True        # —É–¥–∞–ª—è—Ç—å –∫–æ–ø–∏—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
MAX_FILE_BYTES = 500 * 1024 * 1024
API_STORE = BASE / "api_credentials.json"
ACTIVATE_SCRIPT = BASE / "activate_session.py"
LOCAL_MODE = os.getenv("LOCAL_MODE", "1") == "1"  # –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å LOCAL_MODE=1 –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
# ---------------------------------------

app = Client(APP_NAME, bot_token=BOT_TOKEN)
user_consents = {}  # user_id -> bool

DISCLAIMER = (
    "‚ö†Ô∏è –í–ê–ñ–ù–û\n\n"
    "–§–∞–π–ª —Å–µ—Å—Å–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É Telegram‚Äë–∞–∫–∫–∞—É–Ω—Ç—É. "
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º.\n\n"
    "–ù–∞–∂–∏–º–∞—è ¬´–Ø —Å–æ–≥–ª–∞—Å–µ–Ω¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º –∏ —á—Ç–æ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Ä–∏—Å–∫–∏."
)

def menu(consented: bool):
    if not consented:
        return InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –∏ —Å–æ–≥–ª–∞—Å–µ–Ω(–∞)", callback_data="consent")]])
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç (–ø–æ–ª—É—á–∏—Ç—å –º–æ—é —Å–µ—Å—Å–∏—é)", callback_data="export")],
        [InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª)", callback_data="import")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", callback_data="set_api")],
        [InlineKeyboardButton("‚ùì–ü–æ–º–æ—â—å", callback_data="help")]
    ])

def load_api():
    if not API_STORE.exists():
        return {}
    try:
        return json.loads(API_STORE.read_text(encoding="utf-8"))
    except:
        return {}

def save_api(data: dict):
    API_STORE.write_text(json.dumps(data), encoding="utf-8")
    try:
        os.chmod(API_STORE, 0o600)
    except Exception:
        pass

def list_user_files(uid: int):
    pref = f"{uid}_"
    return [p.name for p in SESSIONS.iterdir() if p.is_file() and p.name.startswith(pref)]

@app.on_message(filters.command("start") & filters.private)
async def start(c: Client, m: Message):
    user_consents[m.from_user.id] = False
    await m.reply(DISCLAIMER, reply_markup=menu(False))

@app.on_callback_query()
async def cb(c: Client, q):
    uid = q.from_user.id
    data = q.data

    if data == "consent":
        user_consents[uid] = True
        await q.answer("–°–æ–≥–ª–∞—Å–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.")
        await q.message.edit_text(DISCLAIMER, reply_markup=menu(True))
        return

    if not user_consents.get(uid, False):
        await q.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä.", show_alert=True)
        return

    if data == "help":
        await q.message.reply("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –ò–º–ø–æ—Ä—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .session\n‚Ä¢ –ò–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É sessions/ —Å –∏–º–µ–Ω–µ–º <your_userid>_name.session\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –≠–∫—Å–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.\n‚Ä¢ –î–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_api –∏ –∑–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç ‚Äî –ø—Ä–∏ LOCAL_MODE=1 –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç Telethon –ª–æ–∫–∞–ª—å–Ω–æ.")
        await q.answer()
        return

    if data == "set_api":
        await q.message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`/set_api <api_id> <api_hash>`\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–π –º–∞—à–∏–Ω–µ.", parse_mode="markdown")
        await q.answer()
        return

    if data == "import":
        await q.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ .session –∫–∞–∫ —Ñ–∞–π–ª (Attach -> File).")
        await q.answer()
        return

    if data == "export":
        files = list_user_files(uid)
        if not files:
            await q.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –≤ –±–æ—Ç –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ sessions/ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º <user_id>_.", show_alert=True)
            return
        # –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ 1 ‚Äî —Å—Ä–∞–∑—É
        if len(files) == 1:
            f = SESSIONS / files[0]
            if f.stat().st_size > MAX_FILE_BYTES:
                await q.answer("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.", show_alert=True); return
            try:
                await q.message.reply_document(str(f), caption="–í–∞—à —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏")
                await q.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                if DELETE_AFTER_SEND:
                    f.unlink(missing_ok=True)
                return
            except Exception as e:
                await q.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + str(e), show_alert=True); return
        else:
            buttons = [[InlineKeyboardButton(n, callback_data=f"export_file:{n}")] for n in files]
            await q.message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=InlineKeyboardMarkup(buttons))
            await q.answer()
            return

    if data.startswith("export_file:"):
        fname = data.split("export_file:",1)[1]
        f = SESSIONS / fname
        if not f.exists():
            await q.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True); return
        try:
            await q.message.reply_document(str(f), caption=f"–í–∞—à —Ñ–∞–π–ª: {fname}")
            await q.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            if DELETE_AFTER_SEND:
                f.unlink(missing_ok=True)
        except Exception as e:
            await q.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: "+str(e), show_alert=True)

@app.on_message(filters.command("set_api") & filters.private)
async def set_api(c: Client, m: Message):
    parts = m.text.strip().split()
    if len(parts) != 3:
        await m.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_api <api_id> <api_hash>")
        return
    uid = m.from_user.id
    store = load_api()
    store[str(uid)] = {"api_id": int(parts[1]), "api_hash": parts[2]}
    save_api(store)
    await m.reply("API –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (—Ñ–∞–π–ª api_credentials.json, –ø—Ä–∞–≤–∞ 600).")

@app.on_message(filters.document & filters.private)
async def on_doc(c: Client, m: Message):
    uid = m.from_user.id
    if not user_consents.get(uid, False):
        await m.reply("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä.")
        return
    doc = m.document
    if doc.file_size and doc.file_size > MAX_FILE_BYTES:
        await m.reply("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π."); return
    safe = f"{uid}_{doc.file_name}"
    path = SESSIONS / safe
    i = 1
    while path.exists():
        path = SESSIONS / f"{uid}_{i}_{doc.file_name}"; i += 1
    await m.download(file_name=str(path))
    # —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await m.reply_document(str(path), caption="–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω.")
    # –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Telethon –∫–ª–∏–µ–Ω—Ç–∞
    store = load_api()
    creds = store.get(str(uid))
    if LOCAL_MODE and creds and ACTIVATE_SCRIPT.exists():
        # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å: python activate_session.py <path> --api-id <id> --api-hash <hash>
        cmd = [sys.executable, str(ACTIVATE_SCRIPT), str(path), "--api-id", str(creds["api_id"]), "--api-hash", str(creds["api_hash"])]
        try:
            subprocess.Popen(cmd)
            await m.reply("‚û°Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ (Telethon). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω activate_session.py.")
        except Exception as e:
            await m.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–∫—Ç–∏–≤–∞—Ç–æ—Ä: {e}")
    else:
        if not LOCAL_MODE:
            await m.reply("‚ÑπÔ∏è LOCAL_MODE –Ω–µ –≤–∫–ª—é—á—ë–Ω ‚Äî –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ LOCAL_MODE=1 –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞.")
        elif not creds:
            await m.reply("‚ÑπÔ∏è API creds –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_api <api_id> <api_hash> —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ.")
        elif not ACTIVATE_SCRIPT.exists():
            await m.reply("‚ÑπÔ∏è –°–∫—Ä–∏–ø—Ç activate_session.py –Ω–µ –Ω–∞–π–¥–µ–Ω —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º.")
    # —É–¥–∞–ª—è–µ–º –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if DELETE_AFTER_SEND:
        try: path.unlink(missing_ok=True)
        except: pass
    return

@app.on_message(filters.command("help") & filters.private)
async def help_cmd(c: Client, m: Message):
    await m.reply("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1) /start -> —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–æ–º\n2) /set_api <id> <hash> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω—É–∂–µ–Ω –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞)\n3) –û—Ç–ø—Ä–∞–≤—å—Ç–µ .session –∫–∞–∫ —Ñ–∞–π–ª -> –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç —Ñ–∞–π–ª –∏, –ø—Ä–∏ LOCAL_MODE=1 –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö creds, –∑–∞–ø—É—Å—Ç–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π Telethon –∫–ª–∏–µ–Ω—Ç.")

if __name__ == "__main__":
    print("Starting bot. Sessions dir:", SESSIONS)
    print("LOCAL_MODE:", LOCAL_MODE)
    app.run()
